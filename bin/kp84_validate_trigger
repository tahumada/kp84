#!/usr/bin/env python
  
import os, sys
import glob
import optparse
import requests

import numpy as np
import h5py
import healpy as hp
from astropy.table import Table, Column
from astropy.io import ascii
from astropy import units as u
from astropy.coordinates import SkyCoord
from astropy.coordinates import Angle
from astroquery.vizier import Vizier

import matplotlib
import matplotlib.patches as patches
matplotlib.use('Agg')
from matplotlib import pyplot as plt

from penquins import Kowalski

import urllib
import pandas as pd

def parse_commandline():
    """
    Parse the options given on the command-line.
    """
    parser = optparse.OptionParser()

    parser.add_option("--catalogDir", help="catalog directory",default="../catalogs")
    parser.add_option("-o","--outputDir",default="../ztf_candidates")

    parser.add_option("-r","--ra",default=214.956010,type=float)
    parser.add_option("-d","--declination",default=33.005978,type=float)
    parser.add_option("-a","--radius",default=5.0,type=float)

    parser.add_option("--doSkymap",  action="store_true", default=False)
    parser.add_option("-m","--skymap",default="/Users/mcoughlin/Code/LIGO/gwemopt/data/GW190427/LALInference1.fits.gz,0")

    parser.add_option("--kowalski_user")
    parser.add_option("--kowalski_pwd")

    parser.add_option("--doMarshalCandidates",  action="store_true", default=False)
    parser.add_option("-s","--start_day",default="20190426") 
    parser.add_option("-e","--end_day",default="20190429") 
    parser.add_option("-p","--programid",default=2,type=int)
    parser.add_option("-j","--jdmin",default=2458600.140231,type=float)
    parser.add_option("--skipper_user")
    parser.add_option("--skipper_pwd")

    parser.add_option("--doPlots",  action="store_true", default=False)
    parser.add_option("--doVerbose",  action="store_true", default=False)

    opts, args = parser.parse_args()

    return opts

def get_trigger_cands(start_day,end_day,username,password,programid=2):

    url_report = 'http://skipper.caltech.edu:8080/cgi-bin/growth/list_sources_bare.cgi?programidx={}&startdate={}-{}-{}+15%3A26%3A50&enddate={}-{}-{}++15%3A26%3A50'
    url_report_page = url_report.format(programid,
                                        start_day[:4], start_day[4:6],
                                        start_day[6:], end_day[:4],
                                        end_day[4:6], end_day[6:])

    # create a password manager
    password_mgr = urllib.request.HTTPPasswordMgrWithDefaultRealm()
    top_level_url = "http://skipper.caltech.edu:8080/"
    password_mgr.add_password(None, top_level_url, username, password)     # Add the username and password.

    handler = urllib.request.HTTPBasicAuthHandler(password_mgr)
    opener = urllib.request.build_opener(handler)
    opener.open(url_report_page)
    urllib.request.install_opener(opener)
    with urllib.request.urlopen(url_report_page) as url:
        data = url.read().decode()

    df_list = pd.read_html(data,header=0)

    coord=[]
    name_=[]
    for i in range(len(df_list[1]['Name (age)'])):
        if pd.notna(df_list[1]['Name (age)'][i]):
            if "Showing" in df_list[1]['Name (age)'][i][:12]: continue
            name_.append(df_list[1]['Name (age)'][i][:12])
            coord.append(df_list[1]['RA  Dec'][i]) 

    coord=np.array(coord)
    name_=np.array(name_)

    ra_transient,dec_transient=[],[]
    for i in range(len(coord)):
        if "Showing" in coord[i]: continue
        c = SkyCoord(coord[i], unit=(u.hourangle, u.deg))
        ra_transient.append( c.ra.deg)
        dec_transient.append( c.dec.deg)

    return name_, ra_transient,dec_transient

def ps1cone(ra,dec,radius,table="mean",release="dr1",format="csv",columns=None,
           baseurl="https://catalogs.mast.stsci.edu/api/v0.1/panstarrs", verbose=False,
           **kw):
    """Do a cone search of the PS1 catalog
    
    Parameters
    ----------
    ra (float): (degrees) J2000 Right Ascension
    dec (float): (degrees) J2000 Declination
    radius (float): (degrees) Search radius (<= 0.5 degrees)
    table (string): mean, stack, or detection
    release (string): dr1 or dr2
    format: csv, votable, json
    columns: list of column names to include (None means use defaults)
    baseurl: base URL for the request
    verbose: print info about request
    **kw: other parameters (e.g., 'nDetections.min':2)
    """

    data = kw.copy()
    data['ra'] = ra
    data['dec'] = dec
    data['radius'] = radius
    return ps1search(table=table,release=release,format=format,columns=columns,
                    baseurl=baseurl, verbose=verbose, **data)

def ps1search(table="mean",release="dr1",format="csv",columns=None,
           baseurl="https://catalogs.mast.stsci.edu/api/v0.1/panstarrs", verbose=False,
           **kw):
    """Do a general search of the PS1 catalog (possibly without ra/dec/radius)
    
    Parameters
    ----------
    table (string): mean, stack, or detection
    release (string): dr1 or dr2
    format: csv, votable, json
    columns: list of column names to include (None means use defaults)
    baseurl: base URL for the request
    verbose: print info about request
    **kw: other parameters (e.g., 'nDetections.min':2).  Note this is required!
    """

    data = kw.copy()
    if not data:
        raise ValueError("You must specify some parameters for search")
    checklegal(table,release)
    if format not in ("csv","votable","json"):
        raise ValueError("Bad value for format")
    url = "{baseurl}/{release}/{table}.{format}".format(**locals())
    if columns:
        # check that column values are legal
        # create a dictionary to speed this up
        dcols = {}
        for col in ps1metadata(table,release)['name']:
            dcols[col.lower()] = 1
        badcols = []
        for col in columns:
            if col.lower().strip() not in dcols:
                badcols.append(col)
        if badcols:
            raise ValueError('Some columns not found in table: {}'.format(', '.join(badcols)))
        # two different ways to specify a list of column values in the API
        # data['columns'] = columns
        data['columns'] = '[{}]'.format(','.join(columns))

# either get or post works
#    r = requests.post(url, data=data)
    r = requests.get(url, params=data)

    if verbose:
        print(r.url)
    r.raise_for_status()
    if format == "json":
        return r.json()
    else:
        return r.text

def checklegal(table,release):
    """Checks if this combination of table and release is acceptable
    
    Raises a VelueError exception if there is problem
    """
   
    releaselist = ("dr1", "dr2")
    if release not in ("dr1","dr2"):
        raise ValueError("Bad value for release (must be one of {})".format(', '.join(releaselist)))
    if release=="dr1":
        tablelist = ("mean", "stack")
    else:
        tablelist = ("mean", "stack", "detection")
    if table not in tablelist:
        raise ValueError("Bad value for table (for {} must be one of {})".format(release, ", ".join(tablelist)))

def ps1metadata(table="mean",release="dr1",
           baseurl="https://catalogs.mast.stsci.edu/api/v0.1/panstarrs"):
    """Return metadata for the specified catalog and table
    
    Parameters
    ----------
    table (string): mean, stack, or detection
    release (string): dr1 or dr2
    baseurl: base URL for the request
    
    Returns an astropy table with columns name, type, description
    """

    checklegal(table,release)
    url = "{baseurl}/{release}/{table}/metadata".format(**locals())
    r = requests.get(url)
    r.raise_for_status()
    v = r.json()
    # convert to astropy table
    tab = Table(rows=[(x['name'],x['type'],x['description']) for x in v],
               names=('name','type','description'))
    return tab

def addfilter(dtab):
    """Add filter name as column in detection table by translating filterID
    
    This modifies the table in place.  If the 'filter' column already exists,
    the table is returned unchanged.
    """
    if 'filter' not in dtab.colnames:
        # the filterID value goes from 1 to 5 for grizy
        id2filter = np.array(list('grizy'))
        dtab['filter'] = id2filter[(dtab['filterID']-1).data]
    return dtab

def ps1_dr2_query(ra_deg, dec_deg, rad_deg, maxmag=24,
              maxsources=10000):

    constraints = {'nDetections.gt':1}

    # strip blanks and weed out blank and commented-out values
    columns = """objID,raMean,decMean,nDetections,ng,nr,ni,nz,ny,
        gMeanPSFMag,rMeanPSFMag,iMeanPSFMag,zMeanPSFMag,yMeanPSFMag""".split(',')
    columns = [x.strip() for x in columns]
    columns = [x for x in columns if x and not x.startswith('#')]
    results = ps1cone(ra_deg, dec_deg, rad_deg,release='dr2',
                      columns=columns,verbose=False,**constraints)
    if results == "":
        return []

    tab = ascii.read(results)
    # improve the format
    for filter in 'grizy':
        col = filter+'MeanPSFMag'
        try:
            tab[col].format = ".4f"
            tab[col][tab[col] == -999.0] = np.nan
        except KeyError:
            print("{} not found".format(col))

    objid = tab['objID'][0]
    dconstraints = {'objID': objid}
    dcolumns = ("""objID,detectID,filterID,obsTime,ra,dec,psfFlux,psfFluxErr,psfMajorFWHM,psfMinorFWHM,
                psfQfPerfect,apFlux,apFluxErr,infoFlag,infoFlag2,infoFlag3""").split(',')
    # strip blanks and weed out blank and commented-out values
    dcolumns = [x.strip() for x in dcolumns]
    dcolumns = [x for x in dcolumns if x and not x.startswith('#')]
    
    dresults = ps1search(table='detection',release='dr2',columns=dcolumns,**dconstraints)
    dtab = addfilter(ascii.read(dresults))
    dtab.sort('obsTime')
    dtab["mag"] = -2.5*np.log10(dtab['psfFlux']) + 8.90
   
    return dtab
 
def ps1_query(ra_deg, dec_deg, rad_deg, maxmag=24,
              maxsources=10000):
    """
    Query Pan-STARRS @ VizieR using astroquery.vizier
    parameters: ra_deg, dec_deg, rad_deg: RA, Dec, field
                                          radius in degrees
                maxmag: upper limit G magnitude (optional)
                maxsources: maximum number of sources
    returns: astropy.table object
    """
    vquery = Vizier(columns=['Source', 'RAJ2000', 'DEJ2000',
                             'gmag','rmag','imag','zmag','ymag'],
                    column_filters={"gmag":
                                    ("<%f" % maxmag),
                                   "imag":
                                    ("<%f" % maxmag)},
                    row_limit = maxsources)

    field = SkyCoord(ra=ra_deg, dec=dec_deg,
                           unit=(u.deg, u.deg),
                           frame='icrs')

    try:
        source = vquery.query_region(field,
                               width=("%fd" % rad_deg),
                               catalog="II/349/ps1")
        return source[0]
    except:
        return []

def wise_query(ra_deg, dec_deg, rad_deg, maxmag=24,
               maxsources=10000):
    """
    Query WISE @ VizieR using astroquery.vizier
    parameters: ra_deg, dec_deg, rad_deg: RA, Dec, field
                                          radius in degrees
                maxmag: upper limit G magnitude (optional)
                maxsources: maximum number of sources
    returns: astropy.table object
    """
    vquery = Vizier(columns=['WISE', 'RAJ2000', 'DEJ2000',
                             'W1mag','e_W1mag','W2mag','e_W2mag',
                             'W3mag','e_W3mag','W4mag','e_W4mag'],
                    row_limit = maxsources)

    field = SkyCoord(ra=ra_deg, dec=dec_deg,
                           unit=(u.deg, u.deg),
                           frame='icrs')

    try:
        source = vquery.query_region(field,
                               width=("%fd" % rad_deg),
                               catalog="II/311/wise")
        return source[0]
    except:
        return []

def wise_agn_query(ra_deg, dec_deg, rad_deg, maxmag=24,
               maxsources=10000):
    """
    Query WISE AGN catalog @ VizieR using astroquery.vizier
    parameters: ra_deg, dec_deg, rad_deg: RA, Dec, field
                                          radius in degrees
                maxmag: upper limit G magnitude (optional)
                maxsources: maximum number of sources
    returns: astropy.table object
    """
    vquery = Vizier(columns=['WISEA', 'RAJ2000', 'DEJ2000',
                             'W1mag','e_W1mag','W2mag','e_W2mag',
                             'W3mag','e_W3mag','W4mag','e_W4mag'],
                    row_limit = maxsources)

    field = SkyCoord(ra=ra_deg, dec=dec_deg,
                           unit=(u.deg, u.deg),
                           frame='icrs')

    try:
        source = vquery.query_region(field,
                               width=("%fd" % rad_deg),
                               catalog="J/ApJS/234/23/c75cat")
        return source[0]
    except:
        return []

def sdss_query(ra_deg, dec_deg, rad_deg, maxmag=24,
               maxsources=10000):
    """
    Query SDSS @ VizieR using astroquery.vizier
    parameters: ra_deg, dec_deg, rad_deg: RA, Dec, field
                                          radius in degrees
                maxmag: upper limit G magnitude (optional)
                maxsources: maximum number of sources
    returns: astropy.table object
    """
    vquery = Vizier(columns=['SDSS12', 'RAJ2000', 'DEJ2000',
                             'zph','e_zph',
                             'zsp','e_zsp'],
                    row_limit = maxsources)

    field = SkyCoord(ra=ra_deg, dec=dec_deg,
                           unit=(u.deg, u.deg),
                           frame='icrs')

    try:
        source = vquery.query_region(field,
                               width=("%fd" % rad_deg),
                               catalog="V/147/sdss12")[0]
        return source
    except:
        return []

def vlss_query(ra_deg, dec_deg, rad_deg, maxmag=24,
               maxsources=10000):
    """
    Query NVSS DR1 @ VizieR using astroquery.vizier
    parameters: ra_deg, dec_deg, rad_deg: RA, Dec, field
                                          radius in degrees
                maxmag: upper limit G magnitude (optional)
                maxsources: maximum number of sources
    returns: astropy.table object
    """
    vquery = Vizier(columns=['NVSS', 'RAJ2000', 'DEJ2000',
                             'e_RAJ2000', 'e_DEJ2000',
                             'S1.4', 'e_S1.4'],
                    row_limit = maxsources)

    field = SkyCoord(ra=ra_deg, dec=dec_deg,
                           unit=(u.deg, u.deg),
                           frame='icrs')

    try:
        source = vquery.query_region(field,
                               width=("%fd" % rad_deg),
                               catalog="VIII/65/nvss")[0]
        return source
    except:
        return []

def galex_query(ra_deg, dec_deg, rad_deg, maxmag=24,
               maxsources=10000):
    """
    Query GALEX DR1 @ VizieR using astroquery.vizier
    parameters: ra_deg, dec_deg, rad_deg: RA, Dec, field
                                          radius in degrees
                maxmag: upper limit G magnitude (optional)
                maxsources: maximum number of sources
    returns: astropy.table object
    """
    vquery = Vizier(columns=['NVSS', 'RAJ2000', 'DEJ2000',
                             'FUVmag', 'e_FUVmag',
                             'NUVmag', 'e_NUVmag'],
                    row_limit = maxsources)

    field = SkyCoord(ra=ra_deg, dec=dec_deg,
                           unit=(u.deg, u.deg),
                           frame='icrs')

    try:
        source = vquery.query_region(field,
                               width=("%fd" % rad_deg),
                               catalog="II/335/galex_ais")[0]
        return source
    except:
        return []

# To-Dos:
# Easy / Short-term:
# Implement real WISE color cuts: https://ui.adsabs.harvard.edu/abs/2015ApJS..221...12S/abstract
# Cross-match against X-ray catalogs (for AGN)

# Hard / Long-term:
# Auto-update iPTF/ZTF lightcurves when source is saved
# PS1-based CV set to train on

# Parse command line
opts = parse_commandline()

outputDir = opts.outputDir
if opts.doPlots:
    if not os.path.isdir(outputDir):
        os.makedirs(outputDir)

catalogFile = os.path.join(opts.catalogDir, 'CLU.hdf5')
with h5py.File(catalogFile, 'r') as f:
    name = f['name'][:]
    ra, dec = f['ra'][:], f['dec'][:]
    sfr_fuv, mstar = f['sfr_fuv'][:], f['mstar'][:]
    distmpc, magb = f['distmpc'][:], f['magb'][:]
    a, b2a, pa = f['a'][:], f['b2a'][:], f['pa'][:]
    btc = f['btc'][:]

idx = np.where(distmpc >= 0)[0]
ra, dec = ra[idx], dec[idx]
sfr_fuv, mstar = sfr_fuv[idx], mstar[idx]
distmpc, magb = distmpc[idx], magb[idx]
a, b2a, pa = a[idx], b2a[idx], pa[idx]
btc = btc[idx]

#idx = np.where(distmpc <= 300)[0]
#ra, dec = ra[idx], dec[idx]
#sfr_fuv, mstar = sfr_fuv[idx], mstar[idx]
#distmpc, magb = distmpc[idx], magb[idx]
#a, b2a, pa = a[idx], b2a[idx], pa[idx]
#btc = btc[idx]

galaxy_coords = SkyCoord(ra * u.deg, dec * u.deg, distmpc * u.Mpc)

if opts.doSkymap:
    # Read skymap, calculate top pixels
    top_fraction = 0.90 # limit skymap top 90% region
    skymap = hp.read_map(opts.skymap, verbose=False)
    npix = len(skymap)
    nside = hp.npix2nside(npix)

    # Convert to astropy Table, easier for manipulation
    indices = np.arange(len(skymap))
    tm = Table(data=(indices, skymap), names=('id', 'prob'))
    tm.sort('prob')
    cs = np.cumsum(tm['prob'])
    cs.name='cumsum'
    tm.add_column(cs)

    top_pix = (tm['cumsum'] > 1 - top_fraction)
    tp = Column(data=top_pix, name="top")
    tm.add_column(tp)

    # Cast as a set for easier comparison below
    top_subset = set(tm['id'][tm['top']])

kow = Kowalski(username=opts.kowalski_user, password=opts.kowalski_pwd)

# Load candidates list
if opts.doMarshalCandidates:
    names, ras, decs = get_trigger_cands(opts.start_day,
                                         opts.end_day,
                                         opts.skipper_user,
                                         opts.skipper_pwd, 
                                         programid=opts.programid)
    if opts.doVerbose:
        print('Loaded :',len(names),'ZTF objects')
else:
    ras, decs = [opts.ra, opts.declination]

# QSO Ellipse
ellipse = patches.Ellipse((3.0, 1.25), 1.0, 0.5, 70)

for ra, dec in zip(ras, decs):
    coord = SkyCoord(ra * u.deg, dec * u.deg)
    gc = coord.transform_to('galactic')
    sep = coord.separation(galaxy_coords).deg
    
    qu = { "query_type": "cone_search",
           "object_coordinates": { "radec": "[(%.5f,%.5f)]"%(ra, dec),
                                   "cone_search_radius": "%.2f" % opts.radius,
                                   "cone_search_unit": "arcsec" },
           "catalogs": { "ZTF_alerts": { "filter": "{}", "projection": "{}" } } }
    r = kow.query(query=qu)
    
    if not "result_data" in r:
        print("Query failed for %.5f, %.5f continuing..." % (ra, dec))
    
    key = list(r["result_data"].keys())[0]
    data = r["result_data"][key]
    
    for key in data.keys():
        data_tmp = data[key]
        if len(data_tmp) == 0:
            continue
        ztf_name = data_tmp[0]["_id"]
    
    mags = {}
    bands = {1: 'g', 2: 'r', 3: 'i'}
    for key in bands.keys():
        mags[bands[key]] = []

    distnr, jd, rb, sg = [], [], [], {}
    for jj, dat in enumerate(data_tmp):
        jd.append(dat["candidate"]["jd"])
        distnr.append(dat["candidate"]["distnr"])

        filt = bands[dat["candidate"]["fid"]]
        mags[filt].append([dat["candidate"]["magpsf"],
                           dat["candidate"]["sigmapsf"]])
        rb.append(dat["candidate"]["rb"])
        for ii in range(1,4):
            if jj == 0:
                sg[ii] = []
            sg[ii].append([dat["candidate"]['sgscore%d'%(ii)],
                           dat["candidate"]['distpsnr%d'%(ii)]])

    for ii in range(1,4):
        sg[ii] = np.array(sg[ii])

    for key in bands.keys():
        mags[bands[key]] = np.array(mags[bands[key]])

    peakmag, peaksig, peakfilt = 1e100, 1e100, 'NA'
    peakdelt, peakdeltsig = 0.0, 0.0

    for ii, key in enumerate(bands.keys()):
        photometry = mags[bands[key]]
        if photometry.size == 0: continue
        nepochs, junk = photometry.shape
        mag = np.min(photometry[:,0])
        sig = photometry[np.argmin(photometry[:,0]),1]
        if mag < peakmag:
            peakmag = mag
            peaksig = sig
            peakfilt = bands[key] 

        if nepochs > 1:
            delt = photometry[-1,0] - photometry[0,0]
            if np.abs(delt) > peakdelt:
                peakdelt = delt
                peakdeltsig = np.sqrt(photometry[-1,1]**2 + photometry[0,1]**2)

    ztf_name = ztf_name.split("_")[1]
    
    ps1 = ps1_query(ra, dec, 5/3600.0)
    ps1_lightcurve = ps1_dr2_query(ra, dec, 2/3600.0)

    if not len(ps1_lightcurve) == 0:
        if opts.doPlots:
            # convert flux in Jy to magnitudes
            t, mag = ps1_lightcurve['obsTime'], ps1_lightcurve['mag']
            xlim = np.array([t.min(),t.max()])
            xlim = xlim + np.array([-1,1])*0.02*(xlim[1]-xlim[0])
        
            plt.rcParams.update({'font.size': 14})
            plt.figure(1,(10,10))
            for i, filter in enumerate("grizy"):
                plt.subplot(511+i)
                w = np.where(ps1_lightcurve['filter']==filter)
                plt.plot(t[w],mag[w],'-o')
                plt.ylabel(filter+' [mag]')
                plt.xlim(xlim)
                plt.gca().invert_yaxis()
            plt.xlabel('Time [MJD]')
            plt.tight_layout()
            plotName = os.path.join(outputDir, '%s.png' % ztf_name)
            plt.savefig(plotName)
            plt.close()

    wise = wise_query(ra, dec, 5/3600.0)
    if not len(wise) == 0:
        wise['W1-W2'] = wise['W1mag'] - wise['W2mag']
        wise['W2-W3'] = wise['W2mag'] - wise['W3mag']
    wise_agn = wise_agn_query(ra, dec, 5/3600.0)
    sdss = sdss_query(ra, dec, 20/3600.0)
    vlss = vlss_query(ra, dec, 5/3600.0)
    galex = galex_query(ra, dec, 5/3600.0)    

    try:
        result_table = Simbad.query_region(coord,
                                           radius=10.0/3600.0 * u.deg)
        if not result_table is None:
            name = result_table[0]["MAIN_ID"].decode()
        else:
            name = "NA"
    except:
        name = "NA"
    
    notes = []
    if gc.b.deg < 15:
        notes.append('[lowb]')
    host = False
    stellar = False
    for ii in sg.keys():
        if dec < 15.0:
            idx = np.where(sg[ii][:,0] < 0.5)[0]
        else:
            idx = np.where(sg[ii][:,0] < 0.825)[0]
        if len(idx) > 0:
            if np.any(sg[ii][idx,1] < 50):
                host=True
                break
    for ii in sg.keys():
        if dec < 15.0:
            idx = np.where(sg[ii][:,0] > 0.5)[0]
        else:
            idx = np.where(sg[ii][:,0] > 0.825)[0]
        if len(idx) > 0:
            if np.any(sg[ii][idx,1] < 5):
                stellar=True
                break
    if not host:
        notes.append('[hostless]')
    if stellar:
        notes.append('[stellar]')
    
    if (np.min(sep)*3600.0) < 10:
        notes.append('[distance: %.1f Mpc]' % distmpc[np.argmin(sep)])
    
    for row in sdss:
        if row["zsp"] > 0:
            notes.append('[specz = %.2f +- %.2f]' % (row["zsp"], row["e_zsp"]))
        if row["zph"] > 0:
            notes.append('[photz = %.2f +- %.2f]' % (row["zph"], row["e_zph"]))
   
    if not len(wise) == 0:
        qso = ellipse.contains_point((wise['W1-W2'],wise['W2-W3']))
        if qso:
            notes.append('[agn]')
    if not len(wise_agn) == 0:    
        notes.append('[agn Assef+18]')
    if not len(vlss) == 0:
        notes.append('[nvss]')
    if not len(galex) == 0:
        notes.append('[galex]')

    if opts.doSkymap:
        pix = hp.ang2pix(nside, ra, dec, lonlat=True)
        if not pix in top_subset:
            continue
        #if pix in top_subset:
        #    notes.append('[in90]')
   
    if np.min(jd) < opts.jdmin:
        continue

    if not peakdelt == 0.0:
        peakdeltsnr = peakdelt/peakdeltsig
        if peakdeltsnr > 2:
            notes.append('[rising]')
        elif peakdeltsnr < -2:
            notes.append('[fading]')

    print('%s | %.7f | %.7f | %s | %.2f | %.2f | %s' % (ztf_name,
                                                        ra, dec,
                                                        peakfilt,
                                                        peakmag,
                                                        peaksig,
                                                        " ".join(notes)))
    
    if opts.doVerbose:
        print('ZTF name: %s' % ztf_name)
        print('Peak magnitude (%s): %.1f +- %.1f' % (peakfilt,
                                                     peakmag,
                                                     peaksig))
        print('Galactic Latitude: %.5f' % gc.b.deg)
        print('JD start time: %.5f' % np.min(jd))
        print('Separation from nearest CLU galaxy (arcseconds): %.5f' % (np.min(sep)*3600.0))
        print('Galaxy distance (Mpc): %.1f' % (distmpc[np.argmin(sep)]))
        print('')
        print('PS1 information:')
        if not len(ps1) == 0:
            for colname in ps1.columns:
                column = ps1[colname]
                print('%s: %s' % (colname, column[0]))
        print('')
        if not len(wise) == 0:
            print('WISE information:')
            for colname in wise.columns:
                column = wise[colname]
                print('%s: %s' % (colname, column[0]))
        print('')
        print('Vizier name: %s' % name) 
        print('')
        for ii in sg.keys():
            print('SG %d: %s' % (ii, sg[ii]))
        print('')
        print('SDSS spec/phot z')
        for row in sdss:
            if row["zsp"] > 0:
                print('Spec Z = %.2f +- %.2f' % (row["zsp"], row["e_zsp"]))
            if row["zph"] > 0:
                print('Phot Z = %.2f +- %.2f' % (row["zph"], row["e_zph"]))
