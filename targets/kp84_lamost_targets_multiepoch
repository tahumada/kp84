
import os, sys, optparse, shutil, time
import glob
import numpy as np
import numpy_indexed as npi
from matplotlib import pyplot as plt
import matplotlib.patches as patches

import h5py

import astropy.table
from astropy import units as u
from astropy.coordinates import SkyCoord
from astropy.coordinates import EarthLocation
from astropy.table import Table
from astropy.time import Time
from astropy.io import fits
from astropy.io import ascii

from astroquery.vizier import Vizier
Vizier.ROW_LIMIT = -1

def parse_commandline():
    """
    Parse the options given on the command-line.
    """
    parser = optparse.OptionParser()
    parser.add_option("-o","--outputDir",default="../output_lamost")

    opts, args = parser.parse_args()

    return opts

# Parse command line
opts = parse_commandline()

if not os.path.isdir(opts.outputDir):
    os.makedirs(opts.outputDir)

fitsfile = "../catalogs/dr5_v3.fits"
hdul = fits.open(fitsfile)
hdr = hdul[1].header
fitsdata = hdul[1].data

obsid = fitsdata["obsid"]
ras = fitsdata["ra"]
decs = fitsdata["dec"]
snrg = fitsdata["snrg"]
snrr = fitsdata["snrr"]

snrthresh = 20.0
idx = np.where( (snrg>snrthresh) | (snrr>snrthresh) )[0]
obsid, ras, decs = obsid[idx], ras[idx], decs[idx]

idx = np.where((decs >= -30.0) & (decs <= 80.0))[0]
obsid, ras, decs = obsid[idx], ras[idx], decs[idx]

data = np.vstack((ras, decs)).T
count = npi.multiplicity(data)
idx = np.where(count > 1)[0]
data = data[idx,:]
obsid = obsid[idx]

vals, idx, inverse, count = np.unique(data,axis=0,return_index=True,return_inverse=True,return_counts=True)
ras = vals[:,0]
decs = vals[:,1]

filename_out = os.path.join(opts.outputDir,'lamost_multiepoch.hdf5')
with h5py.File(filename_out, 'w') as f:
    f.create_dataset('ra', data=ras)
    f.create_dataset('dec', data=decs)

filename_out = os.path.join(opts.outputDir,'lamost_indices_multiepoch.hdf5')
with h5py.File(filename_out, 'w') as f:
    f.create_dataset('obsid', data=obsid)
    f.create_dataset('inverse', data=inverse)

plotName = os.path.join(opts.outputDir,'radec.pdf')
plt.figure()
plt.hist2d(ras, decs, bins=(50, 50), cmap=plt.cm.jet)
plt.savefig(plotName)
plt.close()
