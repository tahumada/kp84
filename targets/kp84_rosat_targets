
import os, sys, optparse, shutil, time
import glob
import numpy as np
from matplotlib import pyplot as plt
import matplotlib.patches as patches

import astropy.table
from astropy import units as u
from astropy.coordinates import SkyCoord
from astropy.coordinates import EarthLocation
from astropy.table import Table
from astropy.time import Time
from astropy.io import fits
from astropy.io import ascii

from astroquery.vizier import Vizier
Vizier.ROW_LIMIT = -1

def parse_commandline():
    """
    Parse the options given on the command-line.
    """
    parser = optparse.OptionParser()
    parser.add_option("-o","--outputDir",default="../output_rosat")

    opts, args = parser.parse_args()

    return opts

def rosat_query(maxsources=1000000): 
    """
    Query Gaia DR1 @ VizieR using astroquery.vizier
    parameters: ra_deg, dec_deg, rad_deg: RA, Dec, field 
                                          radius in degrees
                maxmag: upper limit G magnitude (optional)
                maxsources: maximum number of sources
    returns: astropy.table object
    """
    vquery = Vizier(columns=['2RXS', 'RAJ2000', 'DEJ2000', 
                             'CRate', 'e_CRate',
                             'HR1', 'e_HR1',
                             'HR2', 'e_HR2'], 
                    row_limit = maxsources) 

    sources = vquery.get_catalogs("J/A+A/588/A103/cat2rxs")
    return sources[0]

def gaia_query(ra_deg, dec_deg, rad_deg, maxmag=25,
               maxsources=1):
    """
    Query Gaia DR1 @ VizieR using astroquery.vizier
    parameters: ra_deg, dec_deg, rad_deg: RA, Dec, field
                                          radius in degrees
                maxmag: upper limit G magnitude (optional)
                maxsources: maximum number of sources
    returns: astropy.table object
    """
    vquery = Vizier(columns=['Source', 'RA_ICRS', 'DE_ICRS',
                             'phot_g_mean_mag','phot_r_mean_mag',
                             'Plx', 'e_Plx', 'BP-RP'],
                    column_filters={"phot_g_mean_mag":
                                    ("<%f" % maxmag),
                                   "phot_r_mean_mag":
                                    ("<%f" % maxmag)},
                    row_limit = maxsources)

    field = SkyCoord(ra=ra_deg, dec=dec_deg,
                           unit=(u.deg, u.deg),
                           frame='icrs')

    try:
        source = vquery.query_region(field,
                               width=("%fd" % rad_deg),
                               catalog="I/345/gaia2")
        return source[0]
    except:
        return []

# Parse command line
opts = parse_commandline()
cat = rosat_query(maxsources=1000000)

if not os.path.isdir(opts.outputDir):
    os.makedirs(opts.outputDir)

filename = os.path.join(opts.outputDir,'rosat.dat')
fid = open(filename,'w')
names, ras, decs, CR0s = cat['_2RXS'], cat['RAJ2000'], cat['DEJ2000'], cat['CRate']
for name, ra, dec, cr0 in zip(names, ras, decs, CR0s):
    if dec < -30: continue

    fid.write('%s %.5f %.5f %.5e\n'%(name, ra, dec, cr0))
fid.close()


