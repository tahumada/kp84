
import os, sys, optparse, shutil, time
import glob
import numpy as np
from matplotlib import pyplot as plt
import matplotlib.patches as patches

import astropy.table
from astropy import units as u
from astropy.coordinates import SkyCoord
from astropy.coordinates import EarthLocation
from astropy.table import Table
from astropy.time import Time
from astropy.io import fits
from astropy.io import ascii

from astroquery.vizier import Vizier
Vizier.ROW_LIMIT = -1
Vizier.TIMEOUT = 120

def parse_commandline():
    """
    Parse the options given on the command-line.
    """
    parser = optparse.OptionParser()
    parser.add_option("-o","--outputDir",default="../output_gaia")

    opts, args = parser.parse_args()

    return opts

def gaia_query(maxsources=1000,maxmag=15): 
    """
    Query Gaia DR1 @ VizieR using astroquery.vizier
    parameters: ra_deg, dec_deg, rad_deg: RA, Dec, field 
                                          radius in degrees
                maxmag: upper limit G magnitude (optional)
                maxsources: maximum number of sources
    returns: astropy.table object
    """

    vquery = Vizier(columns=['Source', 'RA_ICRS', 'DE_ICRS',
                             'phot_g_mean_mag','phot_r_mean_mag',
                             'Plx', 'e_Plx', 'BP-RP',
                             'Teff', 'Rad', 'Lum', ],
                    column_filters={"phot_g_mean_mag":
                                    ("<%f" % maxmag),
                                   "phot_r_mean_mag":
                                    ("<%f" % maxmag),
                                   "phot_r_mean_mag":
                                    ("<%f" % maxmag),
                                   "Rad": (">0"), "Lum": (">0"),
                                   "DE_ICRS": (">-30")},
                    row_limit = maxsources)

    sources = vquery.get_catalogs("I/345/gaia2")
    return sources[0]

# Parse command line
opts = parse_commandline()
cat = gaia_query(maxsources=1000000)

print(len(cat))
print(stop)

if not os.path.isdir(opts.outputDir):
    os.makedirs(opts.outputDir)

filename = os.path.join(opts.outputDir,'rosat.dat')
fid = open(filename,'w')
names, ras, decs, errs, CR0s = cat['_2RXP'], cat['RAJ2000'], cat['DEJ2000'], cat['ErrPos'], cat['Crate']
for name, ra, dec, err, cr0 in zip(names, ras, decs, errs, CR0s):
    if dec < -30: continue
    if np.ma.is_masked(err): continue

    fid.write('%s %.5f %.5f %.5f %.5e\n'%(name, ra, dec, err, cr0))
fid.close()


